// Manual implementation - not generated by tfsmcgen.
// This file contains custom datasource logic for generic element search.
// Package provider implements the SMC Terraform provider resources and data sources.
package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	"github.com/terraform-providers/terraform-provider-smc/internal/sdk/request"
	"github.com/terraform-providers/terraform-provider-smc/internal/smc"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &ElementDataSource{}

// NewElementDataSource creates a new instance of the Element data source.
func NewElementDataSource() datasource.DataSource {
	return &ElementDataSource{}
}

// ElementDataSource defines the data source implementation.
type ElementDataSource struct {
	client *smc.Client
}

// ElementDataSourceModel describes the data source data model.
type ElementDataSourceModel struct {
	Type     types.String   `tfsdk:"type"`
	Name     types.String   `tfsdk:"name"`
	Elements []ElementModel `tfsdk:"elements"`
	ID       types.String   `tfsdk:"id"`
	Href     types.String   `tfsdk:"href"`
}

// ElementModel describes an individual element in the search results
type ElementModel struct {
	Name types.String `tfsdk:"name"`
	Href types.String `tfsdk:"href"`
	Type types.String `tfsdk:"type"`
}

// Metadata returns the data source type name.
func (d *ElementDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_href"
}

// Schema defines the schema for the Element data source.
func (d *ElementDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Element data source allows searching for multiple SMC elements by type and name pattern. Supports wildcard matching using '*' in the name.",

		Attributes: map[string]schema.Attribute{
			"type": schema.StringAttribute{
				MarkdownDescription: "The type of SMC element to search for (e.g., 'host', 'network', 'group').",
				Required:            true,
			},
			"name": schema.StringAttribute{
				MarkdownDescription: "The name pattern to search for. Supports wildcard matching using '*' (e.g., 'All Router*').",
				Required:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "Data source identifier.",
				Computed:            true,
			},
			"href": schema.StringAttribute{
				MarkdownDescription: "returns the href of the first available element",
				Computed:            true,
			},
			"elements": schema.ListNestedAttribute{
				MarkdownDescription: "List of elements matching the search criteria.",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"name": schema.StringAttribute{
							MarkdownDescription: "The name of the element.",
							Computed:            true,
						},
						"href": schema.StringAttribute{
							MarkdownDescription: "The API href of the element.",
							Computed:            true,
						},
						"type": schema.StringAttribute{
							MarkdownDescription: "The type of the element.",
							Computed:            true,
						},
					},
				},
			},
		},
	}
}

// Configure prepares the data source for use.
func (d *ElementDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*smc.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *smc.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)
		return
	}

	d.client = client
}

// Read performs the search operation and retrieves the matching elements.
func (d *ElementDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data ElementDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Log the search operation
	tflog.Debug(ctx, "Searching for SMC elements", map[string]interface{}{
		"type": data.Type.ValueString(),
		"name": data.Name.ValueString(),
	})

	// Perform the search
	// Create CRUD config for the search
	config := &request.GenericCRUDConfig{
		ResourceType:   data.Type.ValueString(),
		BaseURL:        d.client.URL,
		APIVersion:     d.client.APIVersion,
		Auth:           d.client.Auth,
		GetJSONHeaders: d.client.GetJSONHeaders,
		GetAuthHeaders: d.client.GetAuthHeaders,
	}

	elements, err := request.SearchElements(config, data.Name.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to search elements, got error: %s", err))
		return
	}

	// Convert search results to ElementModel slice
	elementModels := make([]ElementModel, len(elements))
	for i, element := range elements {
		elementModels[i] = ElementModel{
			Name: types.StringValue(element.Name),
			Href: types.StringValue(element.Href),
			Type: types.StringValue(element.Type),
		}
	}

	data.Elements = elementModels
	if len(elementModels) > 0 {
		data.Href = elementModels[0].Href
	} else {
		resp.Diagnostics.AddError("No Elements Found",
			fmt.Sprintf("No elements found matching type '%s' and name pattern '%s'.", data.Type.ValueString(), data.Name.ValueString()))
	}
	// todo id not consistent with create operation. Should provide a function to generate ids
	data.ID = types.StringValue(fmt.Sprintf("%s-%s", data.Type.ValueString(), data.Name.ValueString()))

	tflog.Debug(ctx, "Successfully searched SMC elements", map[string]interface{}{
		"type":  data.Type.ValueString(),
		"name":  data.Name.ValueString(),
		"count": len(elements),
	})

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
