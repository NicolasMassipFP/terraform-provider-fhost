// Manual implementation - not generated by tfsmcgen.
// This file contains the main provider configuration and setup.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	"github.com/hashicorp/terraform-plugin-framework/function"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/terraform-providers/terraform-provider-smc/internal/sdk/auth"
	"github.com/terraform-providers/terraform-provider-smc/internal/smc"
)

// Ensure SmcProvider satisfies various provider interfaces.
var _ provider.Provider = &SmcProvider{}
var _ provider.ProviderWithFunctions = &SmcProvider{}
var _ provider.ProviderWithEphemeralResources = &SmcProvider{}

// SmcProvider defines the provider implementation.
type SmcProvider struct {
	// version is set to the provider version on release, "dev" when the
	// provider is built and ran locally, and "test" when running acceptance
	// testing.
	version string
}

// SmcProviderModel describes the provider data model.
type SmcProviderModel struct {
	// Endpoint types.String `tfsdk:"endpoint"`
	URL         types.String `tfsdk:"url"`
	APIKey      types.String `tfsdk:"api_key"`
	VerifySSL   types.Bool   `tfsdk:"verify_ssl"`
	APIVersion  types.String `tfsdk:"api_version"`
	TrustedCert types.String `tfsdk:"trusted_cert"`
}

// Metadata returns the provider type name and version.
func (p *SmcProvider) Metadata(_ context.Context, _ provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "smc"
	resp.Version = p.version
}

// Schema defines the provider-level schema for configuration data.
func (p *SmcProvider) Schema(_ context.Context, _ provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"url": schema.StringAttribute{
				MarkdownDescription: "The URL of the SMC API",
				Required:            true,
			},
			"api_key": schema.StringAttribute{
				MarkdownDescription: "The API key of the SMC API",
				Required:            true,
				Sensitive:           true,
			},
			"verify_ssl": schema.BoolAttribute{
				MarkdownDescription: "Whether to verify SSL certificates",
				Optional:            true,
			},
			"api_version": schema.StringAttribute{
				MarkdownDescription: "The API version to use for request",
				Required:            true,
			},
			"trusted_cert": schema.StringAttribute{
				MarkdownDescription: "PEM-encoded certificate content to trust for HTTPS connections.",
				Optional:            true,
			},
		},
	}
}

// Configure prepares a SMC API client for data sources and resources.
func (p *SmcProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data SmcProviderModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create auth configuration
	authConfig := &auth.Auth{
		URL:        data.URL.ValueString(),
		APIKey:     data.APIKey.ValueString(),
		APIVersion: data.APIVersion.ValueString(),
	}

	if !data.VerifySSL.IsNull() {
		insecure := !data.VerifySSL.ValueBool()
		authConfig.Insecure = &insecure
	}

	if !data.TrustedCert.IsNull() {
		authConfig.TrustedCert = data.TrustedCert.ValueString()
	}

	// Create SMC client
	client, err := smc.NewClientFromAuth(authConfig)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to Create SMC API Client",
			"An unexpected error occurred when creating the SMC API client. "+
				"If the error is not clear, please contact the provider developers.\n\n"+
				"SMC Client Error: "+err.Error(),
		)
		return
	}

	// Make the client available to resources and data sources
	resp.DataSourceData = client
	resp.ResourceData = client
}

// EphemeralResources defines the ephemeral resources implemented by the provider.
func (p *SmcProvider) EphemeralResources(_ context.Context) []func() ephemeral.EphemeralResource {
	return []func() ephemeral.EphemeralResource{}
}

// Functions defines the functions implemented by the provider.
func (p *SmcProvider) Functions(_ context.Context) []func() function.Function {
	return []func() function.Function{}
}

// New returns a provider.Provider.
func New(version string) func() provider.Provider {
	return func() provider.Provider {
		return &SmcProvider{
			version: version,
		}
	}
}
